/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ability.genero.server.model.impl;

import com.ability.genero.server.model.subcategoria;
import com.ability.genero.server.model.subcategoriaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the subcategoria service. Represents a row in the &quot;GENERO_SUBCATEGORIA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ability.genero.server.model.subcategoriaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link subcategoriaImpl}.
 * </p>
 *
 * @author DELL Villartech
 * @see subcategoriaImpl
 * @see com.ability.genero.server.model.subcategoria
 * @see com.ability.genero.server.model.subcategoriaModel
 * @generated
 */
public class subcategoriaModelImpl extends BaseModelImpl<subcategoria>
	implements subcategoriaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subcategoria model instance should use the {@link com.ability.genero.server.model.subcategoria} interface instead.
	 */
	public static final String TABLE_NAME = "GENERO_SUBCATEGORIA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "ID_CATEGORIA", Types.INTEGER },
			{ "SUBCATEGORIA", Types.VARCHAR },
			{ "URL", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GENERO_SUBCATEGORIA (ID INTEGER not null primary key,ID_CATEGORIA INTEGER,SUBCATEGORIA VARCHAR(75) null,URL VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GENERO_SUBCATEGORIA";
	public static final String ORDER_BY_JPQL = " ORDER BY subcategoria.subcategoria ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GENERO_SUBCATEGORIA.SUBCATEGORIA ASC";
	public static final String DATA_SOURCE = "base_datos_csjDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ability.genero.server.model.subcategoria"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ability.genero.server.model.subcategoria"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ability.genero.server.model.subcategoria"),
			true);
	public static long IDCATEGORIA_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ability.genero.server.model.subcategoria"));

	public subcategoriaModelImpl() {
	}

	public int getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return subcategoria.class;
	}

	public String getModelClassName() {
		return subcategoria.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("idCategoria", getIdCategoria());
		attributes.put("subcategoria", getSubcategoria());
		attributes.put("url", getUrl());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Integer idCategoria = (Integer)attributes.get("idCategoria");

		if (idCategoria != null) {
			setIdCategoria(idCategoria);
		}

		String subcategoria = (String)attributes.get("subcategoria");

		if (subcategoria != null) {
			setSubcategoria(subcategoria);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}
	}

	public int getId() {
		return _id;
	}

	public void setId(int id) {
		_id = id;
	}

	public int getIdCategoria() {
		return _idCategoria;
	}

	public void setIdCategoria(int idCategoria) {
		_columnBitmask |= IDCATEGORIA_COLUMN_BITMASK;

		if (!_setOriginalIdCategoria) {
			_setOriginalIdCategoria = true;

			_originalIdCategoria = _idCategoria;
		}

		_idCategoria = idCategoria;
	}

	public int getOriginalIdCategoria() {
		return _originalIdCategoria;
	}

	public String getSubcategoria() {
		if (_subcategoria == null) {
			return StringPool.BLANK;
		}
		else {
			return _subcategoria;
		}
	}

	public void setSubcategoria(String subcategoria) {
		_columnBitmask = -1L;

		_subcategoria = subcategoria;
	}

	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	public void setUrl(String url) {
		_url = url;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public subcategoria toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (subcategoria)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		subcategoriaImpl subcategoriaImpl = new subcategoriaImpl();

		subcategoriaImpl.setId(getId());
		subcategoriaImpl.setIdCategoria(getIdCategoria());
		subcategoriaImpl.setSubcategoria(getSubcategoria());
		subcategoriaImpl.setUrl(getUrl());

		subcategoriaImpl.resetOriginalValues();

		return subcategoriaImpl;
	}

	public int compareTo(subcategoria subcategoria) {
		int value = 0;

		value = getSubcategoria().compareTo(subcategoria.getSubcategoria());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		subcategoria subcategoria = null;

		try {
			subcategoria = (subcategoria)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = subcategoria.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		subcategoriaModelImpl subcategoriaModelImpl = this;

		subcategoriaModelImpl._originalIdCategoria = subcategoriaModelImpl._idCategoria;

		subcategoriaModelImpl._setOriginalIdCategoria = false;

		subcategoriaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<subcategoria> toCacheModel() {
		subcategoriaCacheModel subcategoriaCacheModel = new subcategoriaCacheModel();

		subcategoriaCacheModel.id = getId();

		subcategoriaCacheModel.idCategoria = getIdCategoria();

		subcategoriaCacheModel.subcategoria = getSubcategoria();

		String subcategoria = subcategoriaCacheModel.subcategoria;

		if ((subcategoria != null) && (subcategoria.length() == 0)) {
			subcategoriaCacheModel.subcategoria = null;
		}

		subcategoriaCacheModel.url = getUrl();

		String url = subcategoriaCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			subcategoriaCacheModel.url = null;
		}

		return subcategoriaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", idCategoria=");
		sb.append(getIdCategoria());
		sb.append(", subcategoria=");
		sb.append(getSubcategoria());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.ability.genero.server.model.subcategoria");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idCategoria</column-name><column-value><![CDATA[");
		sb.append(getIdCategoria());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subcategoria</column-name><column-value><![CDATA[");
		sb.append(getSubcategoria());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = subcategoria.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			subcategoria.class
		};
	private int _id;
	private int _idCategoria;
	private int _originalIdCategoria;
	private boolean _setOriginalIdCategoria;
	private String _subcategoria;
	private String _url;
	private long _columnBitmask;
	private subcategoria _escapedModelProxy;
}