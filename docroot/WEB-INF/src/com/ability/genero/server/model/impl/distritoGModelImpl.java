/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ability.genero.server.model.impl;

import com.ability.genero.server.model.distritoG;
import com.ability.genero.server.model.distritoGModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the distritoG service. Represents a row in the &quot;GENERO_DISTRITOS_MASCARAS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ability.genero.server.model.distritoGModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link distritoGImpl}.
 * </p>
 *
 * @author DELL Villartech
 * @see distritoGImpl
 * @see com.ability.genero.server.model.distritoG
 * @see com.ability.genero.server.model.distritoGModel
 * @generated
 */
public class distritoGModelImpl extends BaseModelImpl<distritoG>
	implements distritoGModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a distrito g model instance should use the {@link com.ability.genero.server.model.distritoG} interface instead.
	 */
	public static final String TABLE_NAME = "GENERO_DISTRITOS_MASCARAS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "NOMBRE", Types.VARCHAR },
			{ "NOMBRE_MASCARA", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GENERO_DISTRITOS_MASCARAS (ID INTEGER not null primary key,NOMBRE VARCHAR(75) null,NOMBRE_MASCARA VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GENERO_DISTRITOS_MASCARAS";
	public static final String DATA_SOURCE = "base_datos_csjDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ability.genero.server.model.distritoG"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ability.genero.server.model.distritoG"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ability.genero.server.model.distritoG"));

	public distritoGModelImpl() {
	}

	public int getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return distritoG.class;
	}

	public String getModelClassName() {
		return distritoG.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("nombre", getNombre());
		attributes.put("nombre_mascara", getNombre_mascara());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}

		String nombre_mascara = (String)attributes.get("nombre_mascara");

		if (nombre_mascara != null) {
			setNombre_mascara(nombre_mascara);
		}
	}

	public int getId() {
		return _id;
	}

	public void setId(int id) {
		_id = id;
	}

	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	public String getNombre_mascara() {
		if (_nombre_mascara == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre_mascara;
		}
	}

	public void setNombre_mascara(String nombre_mascara) {
		_nombre_mascara = nombre_mascara;
	}

	@Override
	public distritoG toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (distritoG)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		distritoGImpl distritoGImpl = new distritoGImpl();

		distritoGImpl.setId(getId());
		distritoGImpl.setNombre(getNombre());
		distritoGImpl.setNombre_mascara(getNombre_mascara());

		distritoGImpl.resetOriginalValues();

		return distritoGImpl;
	}

	public int compareTo(distritoG distritoG) {
		int primaryKey = distritoG.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		distritoG distritoG = null;

		try {
			distritoG = (distritoG)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = distritoG.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<distritoG> toCacheModel() {
		distritoGCacheModel distritoGCacheModel = new distritoGCacheModel();

		distritoGCacheModel.id = getId();

		distritoGCacheModel.nombre = getNombre();

		String nombre = distritoGCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			distritoGCacheModel.nombre = null;
		}

		distritoGCacheModel.nombre_mascara = getNombre_mascara();

		String nombre_mascara = distritoGCacheModel.nombre_mascara;

		if ((nombre_mascara != null) && (nombre_mascara.length() == 0)) {
			distritoGCacheModel.nombre_mascara = null;
		}

		return distritoGCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append(", nombre_mascara=");
		sb.append(getNombre_mascara());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.ability.genero.server.model.distritoG");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre_mascara</column-name><column-value><![CDATA[");
		sb.append(getNombre_mascara());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = distritoG.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			distritoG.class
		};
	private int _id;
	private String _nombre;
	private String _nombre_mascara;
	private distritoG _escapedModelProxy;
}