/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ability.genero.server.model.impl;

import com.ability.genero.server.model.tipoDecision;
import com.ability.genero.server.model.tipoDecisionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the tipoDecision service. Represents a row in the &quot;GENERO_TIPO_DECISION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ability.genero.server.model.tipoDecisionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link tipoDecisionImpl}.
 * </p>
 *
 * @author DELL Villartech
 * @see tipoDecisionImpl
 * @see com.ability.genero.server.model.tipoDecision
 * @see com.ability.genero.server.model.tipoDecisionModel
 * @generated
 */
public class tipoDecisionModelImpl extends BaseModelImpl<tipoDecision>
	implements tipoDecisionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipo decision model instance should use the {@link com.ability.genero.server.model.tipoDecision} interface instead.
	 */
	public static final String TABLE_NAME = "GENERO_TIPO_DECISION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "TIPO_DECISION", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GENERO_TIPO_DECISION (ID INTEGER not null primary key,TIPO_DECISION VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GENERO_TIPO_DECISION";
	public static final String ORDER_BY_JPQL = " ORDER BY tipoDecision.tipoDecision ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GENERO_TIPO_DECISION.TIPO_DECISION ASC";
	public static final String DATA_SOURCE = "base_datos_csjDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ability.genero.server.model.tipoDecision"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ability.genero.server.model.tipoDecision"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ability.genero.server.model.tipoDecision"));

	public tipoDecisionModelImpl() {
	}

	public int getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return tipoDecision.class;
	}

	public String getModelClassName() {
		return tipoDecision.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("tipoDecision", getTipoDecision());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String tipoDecision = (String)attributes.get("tipoDecision");

		if (tipoDecision != null) {
			setTipoDecision(tipoDecision);
		}
	}

	public int getId() {
		return _id;
	}

	public void setId(int id) {
		_id = id;
	}

	public String getTipoDecision() {
		if (_tipoDecision == null) {
			return StringPool.BLANK;
		}
		else {
			return _tipoDecision;
		}
	}

	public void setTipoDecision(String tipoDecision) {
		_tipoDecision = tipoDecision;
	}

	@Override
	public tipoDecision toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (tipoDecision)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		tipoDecisionImpl tipoDecisionImpl = new tipoDecisionImpl();

		tipoDecisionImpl.setId(getId());
		tipoDecisionImpl.setTipoDecision(getTipoDecision());

		tipoDecisionImpl.resetOriginalValues();

		return tipoDecisionImpl;
	}

	public int compareTo(tipoDecision tipoDecision) {
		int value = 0;

		value = getTipoDecision().compareTo(tipoDecision.getTipoDecision());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		tipoDecision tipoDecision = null;

		try {
			tipoDecision = (tipoDecision)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = tipoDecision.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<tipoDecision> toCacheModel() {
		tipoDecisionCacheModel tipoDecisionCacheModel = new tipoDecisionCacheModel();

		tipoDecisionCacheModel.id = getId();

		tipoDecisionCacheModel.tipoDecision = getTipoDecision();

		String tipoDecision = tipoDecisionCacheModel.tipoDecision;

		if ((tipoDecision != null) && (tipoDecision.length() == 0)) {
			tipoDecisionCacheModel.tipoDecision = null;
		}

		return tipoDecisionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", tipoDecision=");
		sb.append(getTipoDecision());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.ability.genero.server.model.tipoDecision");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tipoDecision</column-name><column-value><![CDATA[");
		sb.append(getTipoDecision());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = tipoDecision.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			tipoDecision.class
		};
	private int _id;
	private String _tipoDecision;
	private tipoDecision _escapedModelProxy;
}