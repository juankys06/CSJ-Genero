/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ability.genero.server.model.impl;

import com.ability.genero.server.model.auditoria;
import com.ability.genero.server.model.auditoriaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the auditoria service. Represents a row in the &quot;GENERO_AUDITORIA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ability.genero.server.model.auditoriaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link auditoriaImpl}.
 * </p>
 *
 * @author DELL Villartech
 * @see auditoriaImpl
 * @see com.ability.genero.server.model.auditoria
 * @see com.ability.genero.server.model.auditoriaModel
 * @generated
 */
public class auditoriaModelImpl extends BaseModelImpl<auditoria>
	implements auditoriaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a auditoria model instance should use the {@link com.ability.genero.server.model.auditoria} interface instead.
	 */
	public static final String TABLE_NAME = "GENERO_AUDITORIA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "FECHA", Types.TIMESTAMP },
			{ "EVENTO", Types.VARCHAR },
			{ "TABLA", Types.VARCHAR },
			{ "LOGS", Types.VARCHAR },
			{ "ID_USER", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table GENERO_AUDITORIA (ID LONG not null primary key,FECHA DATE null,EVENTO VARCHAR(75) null,TABLA VARCHAR(75) null,LOGS VARCHAR(75) null,ID_USER LONG)";
	public static final String TABLE_SQL_DROP = "drop table GENERO_AUDITORIA";
	public static final String ORDER_BY_JPQL = " ORDER BY auditoria.fecha DESC";
	public static final String ORDER_BY_SQL = " ORDER BY GENERO_AUDITORIA.FECHA DESC";
	public static final String DATA_SOURCE = "base_datos_csjDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ability.genero.server.model.auditoria"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ability.genero.server.model.auditoria"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ability.genero.server.model.auditoria"));

	public auditoriaModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return auditoria.class;
	}

	public String getModelClassName() {
		return auditoria.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("fecha", getFecha());
		attributes.put("evento", getEvento());
		attributes.put("tabla", getTabla());
		attributes.put("logs", getLogs());
		attributes.put("idUser", getIdUser());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Date fecha = (Date)attributes.get("fecha");

		if (fecha != null) {
			setFecha(fecha);
		}

		String evento = (String)attributes.get("evento");

		if (evento != null) {
			setEvento(evento);
		}

		String tabla = (String)attributes.get("tabla");

		if (tabla != null) {
			setTabla(tabla);
		}

		String logs = (String)attributes.get("logs");

		if (logs != null) {
			setLogs(logs);
		}

		Long idUser = (Long)attributes.get("idUser");

		if (idUser != null) {
			setIdUser(idUser);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public Date getFecha() {
		return _fecha;
	}

	public void setFecha(Date fecha) {
		_fecha = fecha;
	}

	public String getEvento() {
		if (_evento == null) {
			return StringPool.BLANK;
		}
		else {
			return _evento;
		}
	}

	public void setEvento(String evento) {
		_evento = evento;
	}

	public String getTabla() {
		if (_tabla == null) {
			return StringPool.BLANK;
		}
		else {
			return _tabla;
		}
	}

	public void setTabla(String tabla) {
		_tabla = tabla;
	}

	public String getLogs() {
		if (_logs == null) {
			return StringPool.BLANK;
		}
		else {
			return _logs;
		}
	}

	public void setLogs(String logs) {
		_logs = logs;
	}

	public long getIdUser() {
		return _idUser;
	}

	public void setIdUser(long idUser) {
		_idUser = idUser;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			auditoria.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public auditoria toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (auditoria)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		auditoriaImpl auditoriaImpl = new auditoriaImpl();

		auditoriaImpl.setId(getId());
		auditoriaImpl.setFecha(getFecha());
		auditoriaImpl.setEvento(getEvento());
		auditoriaImpl.setTabla(getTabla());
		auditoriaImpl.setLogs(getLogs());
		auditoriaImpl.setIdUser(getIdUser());

		auditoriaImpl.resetOriginalValues();

		return auditoriaImpl;
	}

	public int compareTo(auditoria auditoria) {
		int value = 0;

		value = DateUtil.compareTo(getFecha(), auditoria.getFecha());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		auditoria auditoria = null;

		try {
			auditoria = (auditoria)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = auditoria.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<auditoria> toCacheModel() {
		auditoriaCacheModel auditoriaCacheModel = new auditoriaCacheModel();

		auditoriaCacheModel.id = getId();

		Date fecha = getFecha();

		if (fecha != null) {
			auditoriaCacheModel.fecha = fecha.getTime();
		}
		else {
			auditoriaCacheModel.fecha = Long.MIN_VALUE;
		}

		auditoriaCacheModel.evento = getEvento();

		String evento = auditoriaCacheModel.evento;

		if ((evento != null) && (evento.length() == 0)) {
			auditoriaCacheModel.evento = null;
		}

		auditoriaCacheModel.tabla = getTabla();

		String tabla = auditoriaCacheModel.tabla;

		if ((tabla != null) && (tabla.length() == 0)) {
			auditoriaCacheModel.tabla = null;
		}

		auditoriaCacheModel.logs = getLogs();

		String logs = auditoriaCacheModel.logs;

		if ((logs != null) && (logs.length() == 0)) {
			auditoriaCacheModel.logs = null;
		}

		auditoriaCacheModel.idUser = getIdUser();

		return auditoriaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", fecha=");
		sb.append(getFecha());
		sb.append(", evento=");
		sb.append(getEvento());
		sb.append(", tabla=");
		sb.append(getTabla());
		sb.append(", logs=");
		sb.append(getLogs());
		sb.append(", idUser=");
		sb.append(getIdUser());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.ability.genero.server.model.auditoria");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fecha</column-name><column-value><![CDATA[");
		sb.append(getFecha());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evento</column-name><column-value><![CDATA[");
		sb.append(getEvento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tabla</column-name><column-value><![CDATA[");
		sb.append(getTabla());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logs</column-name><column-value><![CDATA[");
		sb.append(getLogs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idUser</column-name><column-value><![CDATA[");
		sb.append(getIdUser());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = auditoria.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			auditoria.class
		};
	private long _id;
	private Date _fecha;
	private String _evento;
	private String _tabla;
	private String _logs;
	private long _idUser;
	private auditoria _escapedModelProxy;
}